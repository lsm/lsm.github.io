# Official Jekyll GitHub Actions workflow with bilingual preprocessing
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.4' # Match your local Ruby version
          bundler-cache: false # Disable cache to avoid frozen lock issues
          
      - name: Install dependencies
        run: |
          bundle config set frozen false
          bundle install
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      # CUSTOM STEP: Process bilingual content before Jekyll build
      - name: Process bilingual content
        run: |
          echo "üîç Processing bilingual markdown files..."
          
          # Initialize counter
          processed_count=0
          
          # Process files individually
          while IFS= read -r -d '' file; do
            if [ -f "$file" ] && grep -q "bilingual: true" "$file"; then
              echo "üìã Found bilingual file: $file"
              
              # Check if file contains :::lang: syntax
              if grep -q ":::lang:" "$file"; then
                echo "üîÑ Processing: $file (found :::lang: syntax)"
                
                # Create backup
                cp "$file" "${file}.backup"
                
                # Process the file using Ruby directly
                if ruby scripts/bilingual_preprocessor.rb "$file"; then
                  echo "  ‚úÖ Successfully processed $file"
                  processed_count=$((processed_count + 1))
                else
                  echo "  ‚ùå Failed to process $file, restoring backup"
                  mv "${file}.backup" "$file"
                fi
                
                # Clean up backup if processing succeeded
                [ -f "${file}.backup" ] && rm "${file}.backup"
              else
                echo "  ‚Üí No :::lang: syntax found in $file, skipping"
              fi
            fi
          done < <(find . -name "*.md" -not -path "./_site/*" -not -path "./vendor/*" -print0)
          
          echo "üìä Processed $processed_count bilingual files"
          
      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 