require 'fileutils'

desc "Process bilingual content for development (DEPRECATED - now handled by Jekyll plugin)"
task :process_bilingual do
  puts "⚠️  This task is deprecated. Bilingual processing is now handled automatically by Jekyll plugin."
  puts "📋 Source files will remain unchanged with clean :::lang: syntax"
  puts "🔄 Processing happens during Jekyll build automatically"
end

desc "Restore original bilingual files from backups"
task :restore_bilingual do
  puts "🔄 Restoring original bilingual files..."
  
  # This task helps restore files to :::lang: syntax for editing
  restored_count = 0
  
  Dir.glob("**/*.md").reject { |f| f.start_with?("_site/") || f.start_with?("vendor/") }.each do |file|
    next unless File.exist?(file)
    
    content = File.read(file)
    next unless content.match(/^bilingual:\s*true/m)
    
    # Check if file has been processed (contains bilingual-post div)
    if content.include?('<div class="bilingual-post"')
      puts "📋 Restoring #{file} to :::lang: syntax"
      
      # Simple restoration - replace HTML structure back to :::lang: syntax
      restored_content = content
        .gsub(/<div class="bilingual-post" markdown="1">\s*/, '')
        .gsub(/<div class="lang-content lang-en" data-lang="en" markdown="1">\s*/, "\n:::lang:en\n\n")
        .gsub(/<div class="lang-content lang-zh" data-lang="zh" markdown="1">\s*/, "\n:::lang:zh\n\n")
        .gsub(/\s*<\/div>\s*<\/div>\s*$/, '')
        .gsub(/\s*<\/div>\s*/, "\n\n:::lang:end\n")
      
      File.write(file, restored_content)
      restored_count += 1
      puts "  ✅ Restored #{file}"
    end
  end
  
  puts "📊 Restored #{restored_count} files to :::lang: syntax"
end

desc "Serve development server with automatic bilingual processing"
task :serve do
  puts "🚀 Starting development server with automatic bilingual processing..."
  puts "📋 Source files will remain unchanged with clean :::lang: syntax"
  puts "🔄 Bilingual processing happens automatically during Jekyll build"
  
  # Start Jekyll server directly - the plugin will handle processing
  puts "🌐 Starting Jekyll development server..."
  exec "bundle exec jekyll serve --livereload"
end

desc "Build site with automatic bilingual processing"
task :build do
  puts "🏗️ Building site with automatic bilingual processing..."
  puts "📋 Source files will remain unchanged with clean :::lang: syntax"
  puts "🔄 Bilingual processing happens automatically during Jekyll build"
  
  # Build Jekyll site directly - the plugin will handle processing
  puts "🔨 Building Jekyll site..."
  system "bundle exec jekyll build"
end

desc "Clean processed files and restore to :::lang: syntax"
task :clean do
  puts "🧹 Cleaning processed files..."
  
  # Restore bilingual files (in case any were accidentally processed)
  Rake::Task[:restore_bilingual].invoke
  
  # Clean Jekyll build
  system "bundle exec jekyll clean"
  
  puts "✨ Clean complete - files restored to :::lang: syntax"
end

# Default task
task default: :serve 